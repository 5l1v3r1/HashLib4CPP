#ifndef HLPSHA3_H
#define HLPSHA3_H

#include "../Base/HlpHashCryptoNotBuildIn.h"
#include "../Base/HlpHashSize.h"


class SHA3 : public BlockHash, public IICryptoNotBuildIn, public IITransformBlock
{
public:
	virtual void Initialize()
	{
		memset(state, 0, 25 * sizeof(uint64_t));

		state[1] = uint64_t(-1);
		state[2] = uint64_t(-1);
		state[8] = uint64_t(-1);
		state[12] = uint64_t(-1);
		state[17] = uint64_t(-1);
		state[20] = uint64_t(-1);

		BlockHash::Initialize();
	} // end function Initialize

protected:
	SHA3(const HashSize &a_hash_size)
		: BlockHash(int32_t(a_hash_size), 200 - (int32_t(a_hash_size) * 2))
	{
		name = __func__;

		HashSize = GetHashSize();
		BlockSize = GetBlockSize();
	} // end constructor

	~SHA3()
	{
		delete[] state;		
		delete[] data;
	} // end destructor

	virtual void Finish()
	{
		int32_t buffer_pos = buffer->GetPos();
		
		uint8_t *block = buffer->GetBytesZeroPadded();

		block[buffer_pos] = 0x6;
		block[BlockSize - 1] = block[BlockSize - 1] ^ 0x80;

		TransformBlock(block, buffer->GetLength(), 0);

		state[1] = ~state[1];
		state[2] = ~state[2];
		state[8] = ~state[8];
		state[12] = ~state[12];
		state[17] = ~state[17];

	} // end function Finish

	virtual HashLibByteArray GetResult()
	{
		HashLibByteArray result = HashLibByteArray(HashSize);

		Converters::le64_copy(state, 0, &result[0], 0, (int32_t)result.size());

		return result;
	} // end function GetResult

	virtual void TransformBlock(const uint8_t *a_data,
		const int32_t a_data_length, const int32_t a_index)
	{
		uint64_t Aba, Abe, Abi, Abo, Abu, Aga, Age, Agi, Ago, Agu, Aka, Ake, Aki, Ako, Aku,
			Ama, Ame, Ami, Amo, Amu, Asa, Ase, Asi, Aso, Asu, Bba, Bbe, Bbi, Bbo, Bbu,
			Bga, Bge, Bgi, Bgo, Bgu, Bka, Bke, Bki, Bko, Bku, Bma, Bme, Bmi, Bmo, Bmu,
			Bsa, Bse, Bsi, Bso, Bsu, Ca, Ce, Ci, Co, Cu, Da, De, Di, Do, Du, Eba, Ebe,
			Ebi, Ebo, Ebu, Ega, Ege, Egi, Ego, Egu, Eka, Eke, Eki, Eko, Eku, Ema, Eme,
			Emi, Emo, Emu, Esa, Ese, Esi, Eso, Esu;

		register uint32_t j;
		
		Converters::le64_copy(a_data, a_index, data, 0, BlockSize);

		j = 0;
		while (j < (BlockSize >> 3))
		{
			state[j]  = state[j] ^ data[j];
			j++;
		} // end while

		Aba = state[0];
		Abe = state[1];
		Abi = state[2];
		Abo = state[3];
		Abu = state[4];
		Aga = state[5];
		Age = state[6];
		Agi = state[7];
		Ago = state[8];
		Agu = state[9];
		Aka = state[10];
		Ake = state[11];
		Aki = state[12];
		Ako = state[13];
		Aku = state[14];
		Ama = state[15];
		Ame = state[16];
		Ami = state[17];
		Amo = state[18];
		Amu = state[19];
		Asa = state[20];
		Ase = state[21];
		Asi = state[22];
		Aso = state[23];
		Asu = state[24];

		Ca = Aba ^ Aga ^ Aka ^ Ama ^ Asa;
		Ce = Abe ^ Age ^ Ake ^ Ame ^ Ase;
		Ci = Abi ^ Agi ^ Aki ^ Ami ^ Asi;
		Co = Abo ^ Ago ^ Ako ^ Amo ^ Aso;
		Cu = Abu ^ Agu ^ Aku ^ Amu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[0];
		Eba = Eba ^ 0x0000000000000001;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[1];
		Aba = Aba ^ 0x0000000000008082;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[2];
		Eba = Eba ^ 0x800000000000808A;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[3];
		Aba = Aba ^ 0x8000000080008000;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[4];
		Eba = Eba ^ 0x000000000000808B;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[5];
		Aba = Aba ^ 0x0000000080000001;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[6];
		Eba = Eba ^ 0x8000000080008081;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[7];
		Aba = Aba ^ 0x8000000000008009;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[8];
		Eba = Eba ^ 0x000000000000008A;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[9];
		Aba = Aba ^ 0x0000000000000088;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[10];
		Eba = Eba ^ 0x0000000080008009;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[11];
		Aba = Aba ^ 0x000000008000000A;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[12];
		Eba = Eba ^ 0x000000008000808B;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[13];
		Aba = Aba ^ 0x800000000000008B;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[14];
		Eba = Eba ^ 0x8000000000008089;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[15];
		Aba = Aba ^ 0x8000000000008003;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[16];
		Eba = Eba ^ 0x8000000000008002;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[17];
		Aba = Aba ^ 0x8000000000000080;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[18];
		Eba = Eba ^ 0x000000000000800A;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[19];
		Aba = Aba ^ 0x800000008000000A;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[20];
		Eba = Eba ^ 0x8000000080008081;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[21];
		Aba = Aba ^ 0x8000000000008080;
		Ca = Aba;
		Abe = Bbe ^ (~Bbi | Bbo);
		Ce = Abe;
		Abi = Bbi ^ (Bbo & Bbu);
		Ci = Abi;
		Abo = Bbo ^ (Bbu | Bba);
		Co = Abo;
		Abu = Bbu ^ (Bba & Bbe);
		Cu = Abu;
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Aga;
		Age = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Age;
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Agi;
		Ago = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ago;
		Agu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Agu;
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Aka;
		Ake = Bke ^ (Bki & Bko);
		Ce = Ce ^ Ake;
		Aki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Aki;
		Ako = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Ako;
		Aku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Aku;
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ama;
		Ame = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Ame;
		Ami = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Ami;
		Amo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Amo;
		Amu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Amu;
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Asa;
		Ase = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ase;
		Asi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Asi;
		Aso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Aso;
		Asu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Asu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Aba = Aba ^ Da;
		Bba = Aba;
		Age = Age ^ De;
		Bbe = Bits::RotateLeft64(Age, 44);
		Aki = Aki ^ Di;
		Bbi = Bits::RotateLeft64(Aki, 43);
		Amo = Amo ^ Do;
		Bbo = Bits::RotateLeft64(Amo, 21);
		Asu = Asu ^ Du;
		Bbu = Bits::RotateLeft64(Asu, 14);
		Eba = Bba ^ (Bbe | Bbi);
			// Eba := Eba ^ RC[22];
		Eba = Eba ^ 0x0000000080000001;
		Ca = Eba;
		Ebe = Bbe ^ (~Bbi | Bbo);
		Ce = Ebe;
		Ebi = Bbi ^ (Bbo & Bbu);
		Ci = Ebi;
		Ebo = Bbo ^ (Bbu | Bba);
		Co = Ebo;
		Ebu = Bbu ^ (Bba & Bbe);
		Cu = Ebu;
		Abo = Abo ^ Do;
		Bga = Bits::RotateLeft64(Abo, 28);
		Agu = Agu ^ Du;
		Bge = Bits::RotateLeft64(Agu, 20);
		Aka = Aka ^ Da;
		Bgi = Bits::RotateLeft64(Aka, 3);
		Ame = Ame ^ De;
		Bgo = Bits::RotateLeft64(Ame, 45);
		Asi = Asi ^ Di;
		Bgu = Bits::RotateLeft64(Asi, 61);
		Ega = Bga ^ (Bge | Bgi);
		Ca = Ca ^ Ega;
		Ege = Bge ^ (Bgi & Bgo);
		Ce = Ce ^ Ege;
		Egi = Bgi ^ (Bgo | ~Bgu);
		Ci = Ci ^ Egi;
		Ego = Bgo ^ (Bgu | Bga);
		Co = Co ^ Ego;
		Egu = Bgu ^ (Bga & Bge);
		Cu = Cu ^ Egu;
		Abe = Abe ^ De;
		Bka = Bits::RotateLeft64(Abe, 1);
		Agi = Agi ^ Di;
		Bke = Bits::RotateLeft64(Agi, 6);
		Ako = Ako ^ Do;
		Bki = Bits::RotateLeft64(Ako, 25);
		Amu = Amu ^ Du;
		Bko = Bits::RotateLeft64(Amu, 8);
		Asa = Asa ^ Da;
		Bku = Bits::RotateLeft64(Asa, 18);
		Eka = Bka ^ (Bke | Bki);
		Ca = Ca ^ Eka;
		Eke = Bke ^ (Bki & Bko);
		Ce = Ce ^ Eke;
		Eki = Bki ^ (~Bko & Bku);
		Ci = Ci ^ Eki;
		Eko = (~Bko) ^ (Bku | Bka);
		Co = Co ^ Eko;
		Eku = Bku ^ (Bka & Bke);
		Cu = Cu ^ Eku;
		Abu = Abu ^ Du;
		Bma = Bits::RotateLeft64(Abu, 27);
		Aga = Aga ^ Da;
		Bme = Bits::RotateLeft64(Aga, 36);
		Ake = Ake ^ De;
		Bmi = Bits::RotateLeft64(Ake, 10);
		Ami = Ami ^ Di;
		Bmo = Bits::RotateLeft64(Ami, 15);
		Aso = Aso ^ Do;
		Bmu = Bits::RotateLeft64(Aso, 56);
		Ema = Bma ^ (Bme & Bmi);
		Ca = Ca ^ Ema;
		Eme = Bme ^ (Bmi | Bmo);
		Ce = Ce ^ Eme;
		Emi = Bmi ^ (~Bmo | Bmu);
		Ci = Ci ^ Emi;
		Emo = ~Bmo ^ (Bmu & Bma);
		Co = Co ^ Emo;
		Emu = Bmu ^ (Bma | Bme);
		Cu = Cu ^ Emu;
		Abi = Abi ^ Di;
		Bsa = Bits::RotateLeft64(Abi, 62);
		Ago = Ago ^ Do;
		Bse = Bits::RotateLeft64(Ago, 55);
		Aku = Aku ^ Du;
		Bsi = Bits::RotateLeft64(Aku, 39);
		Ama = Ama ^ Da;
		Bso = Bits::RotateLeft64(Ama, 41);
		Ase = Ase ^ De;
		Bsu = Bits::RotateLeft64(Ase, 2);
		Esa = Bsa ^ (~Bse & Bsi);
		Ca = Ca ^ Esa;
		Ese = ~Bse ^ (Bsi | Bso);
		Ce = Ce ^ Ese;
		Esi = Bsi ^ (Bso & Bsu);
		Ci = Ci ^ Esi;
		Eso = Bso ^ (Bsu | Bsa);
		Co = Co ^ Eso;
		Esu = Bsu ^ (Bsa & Bse);
		Cu = Cu ^ Esu;
		Da = Cu ^ Bits::RotateLeft64(Ce, 1);
		De = Ca ^ Bits::RotateLeft64(Ci, 1);
		Di = Ce ^ Bits::RotateLeft64(Co, 1);
			Do  = Ci ^ Bits::RotateLeft64(Cu, 1);
		Du = Co ^ Bits::RotateLeft64(Ca, 1);
		Eba = Eba ^ Da;
		Bba = Eba;
		Ege = Ege ^ De;
		Bbe = Bits::RotateLeft64(Ege, 44);
		Eki = Eki ^ Di;
		Bbi = Bits::RotateLeft64(Eki, 43);
		Emo = Emo ^ Do;
		Bbo = Bits::RotateLeft64(Emo, 21);
		Esu = Esu ^ Du;
		Bbu = Bits::RotateLeft64(Esu, 14);
		Aba = Bba ^ (Bbe | Bbi);
			// Aba := Aba ^ RC[23];
		Aba = Aba ^ 0x8000000080008008;
		Abe = Bbe ^ (~Bbi | Bbo);
		Abi = Bbi ^ (Bbo & Bbu);
		Abo = Bbo ^ (Bbu | Bba);
		Abu = Bbu ^ (Bba & Bbe);
		Ebo = Ebo ^ Do;
		Bga = Bits::RotateLeft64(Ebo, 28);
		Egu = Egu ^ Du;
		Bge = Bits::RotateLeft64(Egu, 20);
		Eka = Eka ^ Da;
		Bgi = Bits::RotateLeft64(Eka, 3);
		Eme = Eme ^ De;
		Bgo = Bits::RotateLeft64(Eme, 45);
		Esi = Esi ^ Di;
		Bgu = Bits::RotateLeft64(Esi, 61);
		Aga = Bga ^ (Bge | Bgi);
		Age = Bge ^ (Bgi & Bgo);
		Agi = Bgi ^ (Bgo | ~Bgu);
		Ago = Bgo ^ (Bgu | Bga);
		Agu = Bgu ^ (Bga & Bge);
		Ebe = Ebe ^ De;
		Bka = Bits::RotateLeft64(Ebe, 1);
		Egi = Egi ^ Di;
		Bke = Bits::RotateLeft64(Egi, 6);
		Eko = Eko ^ Do;
		Bki = Bits::RotateLeft64(Eko, 25);
		Emu = Emu ^ Du;
		Bko = Bits::RotateLeft64(Emu, 8);
		Esa = Esa ^ Da;
		Bku = Bits::RotateLeft64(Esa, 18);
		Aka = Bka ^ (Bke | Bki);
		Ake = Bke ^ (Bki & Bko);
		Aki = Bki ^ (~Bko & Bku);
		Ako = ~Bko ^ (Bku | Bka);
		Aku = Bku ^ (Bka & Bke);
		Ebu = Ebu ^ Du;
		Bma = Bits::RotateLeft64(Ebu, 27);
		Ega = Ega ^ Da;
		Bme = Bits::RotateLeft64(Ega, 36);
		Eke = Eke ^ De;
		Bmi = Bits::RotateLeft64(Eke, 10);
		Emi = Emi ^ Di;
		Bmo = Bits::RotateLeft64(Emi, 15);
		Eso = Eso ^ Do;
		Bmu = Bits::RotateLeft64(Eso, 56);
		Ama = Bma ^ (Bme & Bmi);
		Ame = Bme ^ (Bmi | Bmo);
		Ami = Bmi ^ (~Bmo | Bmu);
		Amo = ~Bmo ^ (Bmu & Bma);
		Amu = Bmu ^ (Bma | Bme);
		Ebi = Ebi ^ Di;
		Bsa = Bits::RotateLeft64(Ebi, 62);
		Ego = Ego ^ Do;
		Bse = Bits::RotateLeft64(Ego, 55);
		Eku = Eku ^ Du;
		Bsi = Bits::RotateLeft64(Eku, 39);
		Ema = Ema ^ Da;
		Bso = Bits::RotateLeft64(Ema, 41);
		Ese = Ese ^ De;
		Bsu = Bits::RotateLeft64(Ese, 2);
		Asa = Bsa ^ (~Bse & Bsi);
		Ase = ~Bse ^ (Bsi | Bso);
		Asi = Bsi ^ (Bso & Bsu);
		Aso = Bso ^ (Bsu | Bsa);
		Asu = Bsu ^ (Bsa & Bse);

		state[0]  = Aba;
		state[1]  = Abe;
		state[2]  = Abi;
		state[3]  = Abo;
		state[4]  = Abu;
		state[5]  = Aga;
		state[6]  = Age;
		state[7]  = Agi;
		state[8]  = Ago;
		state[9]  = Agu;
		state[10]  = Aka;
		state[11]  = Ake;
		state[12]  = Aki;
		state[13]  = Ako;
		state[14]  = Aku;
		state[15]  = Ama;
		state[16]  = Ame;
		state[17]  = Ami;
		state[18]  = Amo;
		state[19]  = Amu;
		state[20]  = Asa;
		state[21]  = Ase;
		state[22]  = Asi;
		state[23]  = Aso;
		state[24]  = Asu;

		memset(data, 0, 18 * sizeof(uint64_t));
	} // end function TransformBlock

private:
	static uint64_t *state;
	static uint64_t *data;
	int32_t HashSize, BlockSize;

}; // end class SHA3

uint64_t *SHA3::state = new uint64_t[25];
uint64_t *SHA3::data = new uint64_t[18];


class SHA3_224 : public SHA3
{
public:
	SHA3_224()
		: SHA3(HashSize224)
	{} // end constructor
}; // end class SHA3_224


class SHA3_256 : public SHA3
{
public:
	SHA3_256()
		: SHA3(HashSize256)
	{} // end constructor
}; // end class SHA3_256


class SHA3_384 : public SHA3
{
public:
	SHA3_384()
		: SHA3(HashSize384)
	{} // end constructor
}; // end class SHA3_384


class SHA3_512 : public SHA3
{
public:
	SHA3_512()
		: SHA3(HashSize512)
	{} // end constructor
}; // end class SHA3_512


#endif // !HLPSHA3_H

